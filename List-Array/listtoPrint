
// *********************************************************
// Header file ListA.h for the ADT list
// Array-based implementation
// *********************************************************
#ifndef List_H
#define List_H
const int MAX_LIST = 100;
typedef int ListItemType;

class List
{
public:
   List(); // default constructor
           // destructor is supplied by compiler

   // list operations:
   bool isEmpty() const;
   // Determines whether a list is empty.
   // Precondition: None.
   // Postcondition: Returns true if the list is empty;
   // otherwise returns false.

   int getLength() const;
   // Determines the length of a list.
   // Precondition: None.
   // Postcondition: Returns the number of items
   // that are currently in the list.

   void insert(int index, ListItemType newItem, bool& success);
   // Inserts an item into the list at position index.
   // Precondition: index indicates the position at which
   // the item should be inserted in the list.
   // Postcondition: If insertion is successful, newItem is
   // at position index in the list, and other items are
   // renumbered accordingly, and success is true;
   // otherwise success is false.
   // Note: Insertion will not be successful if
   // index < 0 or index > getLength().

   void remove(int index, bool& success);
   // Deletes an item from the list at a given position.
   // Precondition: index indicates where the deletion
   // should occur.
   // Postcondition: If 0 <= index <= getLength()-1,
   // the item at position index in the list is
   // deleted, other items are renumbered accordingly,
   // and success is true; otherwise success is false.

   void retrieve(int index, ListItemType& dataItem, bool& success) const;
   // Retrieves a list item by position.
   // Precondition: index is the number of the item to
   // be retrieved.
   // Postcondition: If 0 <= index <= getLength()-1,
   // dataItem is the value of the desired item and
   // success is true; otherwise success is false.

private:
   ListItemType items[MAX_LIST]; // array of list items
   int          size;            // number of items in list
}; // end List class

#endif
// End of header file.


// *********************************************************
// Implementation file ListA.cpp for the ADT list
// Array-based implementation
// *********************************************************
#include "List.h" //header file
#include <iostream>
using namespace std;

List::List()
{
    size=0;
} // end default constructor

/*
List::List(ListItemType values[], int number)
{
    int i;

    for (i=0; i<MAX_LIST&&i<number; i++)
        items[i] = values[i];
    size = i;
}
*/

bool List::isEmpty() const
{
   return bool(size == 0);
} // end isEmpty


int List::getLength() const
{
   return size;
} // end getLength

void List::insert(int index, ListItemType newItem, bool& success)
{
   success = bool((index >= 0) && (index <= size) && (size < MAX_LIST));

   if (success)
   {  // make room for new item by shifting all items at
      // positions >= index toward the end of the
      // list (no shift if index == size+1)
      for (int pos = size; pos >= index; pos--)
         items[pos+1] = items[pos];

      // insert new item
      items[index] = newItem;
      size++; // increase the size of the list by one

   } // end if
   else 
      cerr << "insert: Index out ot bound. Operation not carried out" << endl;;
} // end insert

void List::remove(int index, bool& success)
{
   success = bool( (index >= 0) && (index < size) );

   if (success) {  // delete item by shifting all items at positions >
      // index toward the beginning of the list
      // (no shift if index == size)
      for (int fromPosition = index+1; fromPosition <= size; fromPosition++)
         items[fromPosition-1] = items[fromPosition];

      size--; // decrease the size of the list by one
   } // end if
   else 
      cerr << "remove: Index out ot bound. Operation not carried out" << endl;

} // end remove


void List::retrieve(int index, ListItemType& dataItem, bool& success) const
{
   success = bool( (index >= 0) && (index < size) );

   if (success)
      dataItem = items[index];
} // end retrieve

// End of implementation file.

#include <iostream>
using namespace std;
#include "List.h"


int main()
{
    ListItemType data;
    bool success;

    List aList;

    aList.insert(1, 90, success);
    aList.insert(1, 75, success);
    aList.insert(3, 100, success);

    aList.remove(1, success);

    for (int i=aList.getLength(); i>0; i--)
    {
        aList.retrieve(i, data, success);
        if (success)
        {
			cout << data << endl;
        }
    }

	return 0;
}
